//Recent messages by your friends
MATCH (n:Person {person_id: 1931})-[:KNOWS]->(f:Person)<-[:POSTED_BY]-(m:Message)
WHERE datetime(m.message_created_at) < datetime("2010-10-01T10:11:15.960000000Z")
RETURN m.message_id, m.message_content, m.message_created_at, f.person_id, f.person_first_name, f.person_last_name
ORDER BY m.message_created_at DESC

//Friend recommendation (ainda n funciona)
MATCH (interestTag:Tag)<-[:HAS_INTEREST]-(n:Person {person_id: 4398046513970})-[:KNOWS*2..2]->(foaf:Person)
WHERE foaf <> n //AND NOT (n)-[:KNOWS]->(foaf)
  AND date(foaf.person_birthday).month = 2
  AND date(foaf.person_birthday).day >= 21
  OR (
      date(foaf.person_birthday).month = CASE WHEN 2 = 12 THEN 1 ELSE 2 + 1 END
      AND date(foaf.person_birthday).day < 22
  )

WITH  distinct foaf, n, collect(interestTag) AS interestTags

OPTIONAL MATCH (foaf)<-[:POSTED_BY]-(p:Post)<-[:TAG_OF]-(postTag:Tag)

WITH foaf, interestTags, 
     COUNT(CASE WHEN postTag IN interestTags THEN 1 END) AS common,
     COUNT(CASE WHEN NOT postTag IN interestTags THEN 1 END) AS uncommon

WITH foaf, common, uncommon, (common - uncommon) AS commonInterestScore, interestTags

MATCH (foaf)-[:LOCATED_IN]->(city:City)
RETURN foaf.person_id, foaf.person_first_name, foaf.person_last_name, commonInterestScore, common, uncommon, foaf.person_gender, city.name
ORDER BY commonInterestScore DESC, foaf.person_id


//Replies of a message
MATCH (m:Message {message_id: 687194970420})<-[:REPLY_OF]-(m1:Message)
MATCH (m)-[:POSTED_BY]->(messageAuthor:Person) 
MATCH (m1)-[:POSTED_BY]->(replyAuthor:Person)
RETURN 
  m1.message_id as comment_id, m1.message_content as comment_content, m1.message_created_at as comment_created_at, replyAuthor.person_id, replyAuthor.person_first_name, replyAuthor.person_last_name,
  CASE 
    WHEN replyAuthor.person_id = messageAuthor.person_id THEN false 
    ELSE EXISTS((replyAuthor)-[:KNOWS]->(messageAuthor))
  END AS knows